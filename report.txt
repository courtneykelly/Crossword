The program crossword.c was written by Katie Schermerhorn and Courtney Kelly.

From the user perspective, crossword.c will prompt them to input a list of up to 20 words.  It then generates a 15 by 15 crossword puzzle of which it displays the completed puzzle as well as the puzzle without the answers.  It also includes a list of hints that scramble the words and tell where they are located in the puzzle.  If one of the inputed words does not fit in the puzzle, the program will notify the user.

Internally, the program utilizes 11 different functions.  userInput collects the words the user inputs.  It changes the words to all capital letters and notifies the user if the input is invalid. initializeBoard creates the 15 by 15 board made up of periods.  sortWords uses the function qsort to sort the words within the words array based on length.  sortWords uses the function compare to decide how to arrange the words.  initialPlace takes the longest word and inserts it into the center of the board.  placeWord takes one of the words in the words array and checks it with the rest of the board.  If one of the letters of the word matches a letter on the board, it checks if it can be placed on the board using the functions can_place_word_horiz and can_place_word_vert.  These functions check if the word can be placed by checking it against the length and width of the board as well as immediately abover through immedietly below the potential place.  In the case of vertical placement, it checks to the left through to the right of the potential palce.  It also checks the endpoints of the word.  If either prove successful, the program will use the functions place_horiz and place_vert to place the words on the board.  Finally, the function jumbleWords uses the funciton strfry to scramble the words and make the hint.

We verified that crossword.c worked by running it multiple times using different words that varied in letters, length, and amount.

